using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using EMRNext.Core.Domain.Common;

namespace EMRNext.Core.ClinicalDecisionSupport.Models
{
    /// <summary>
    /// Represents a clinical decision support rule
    /// </summary>
    public class ClinicalRule : Entity<Guid>
    {
        /// <summary>
        /// Unique identifier for the rule
        /// </summary>
        public string RuleCode { get; set; }

        /// <summary>
        /// Name of the clinical rule
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Description of the rule's purpose
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Category of the rule (e.g., Diagnosis, Treatment, Prevention)
        /// </summary>
        public RuleCategory Category { get; set; }

        /// <summary>
        /// Severity level of the rule
        /// </summary>
        public RuleSeverity Severity { get; set; }

        /// <summary>
        /// Conditions that trigger the rule
        /// </summary>
        public List<RuleCondition> Conditions { get; set; } = new List<RuleCondition>();

        /// <summary>
        /// Recommendations generated by the rule
        /// </summary>
        public List<RuleRecommendation> Recommendations { get; set; } = new List<RuleRecommendation>();

        /// <summary>
        /// Evidence sources supporting the rule
        /// </summary>
        public List<string> EvidenceSources { get; set; } = new List<string>();

        /// <summary>
        /// Indicates if the rule is currently active
        /// </summary>
        public bool IsActive { get; set; } = true;

        /// <summary>
        /// Confidence score of the rule
        /// </summary>
        public double ConfidenceScore { get; set; }
    }

    /// <summary>
    /// Represents a condition within a clinical rule
    /// </summary>
    public class RuleCondition
    {
        /// <summary>
        /// Type of medical data to evaluate
        /// </summary>
        public string DataType { get; set; }

        /// <summary>
        /// Comparison operator
        /// </summary>
        public ComparisonOperator Operator { get; set; }

        /// <summary>
        /// Expected value for the condition
        /// </summary>
        public object ExpectedValue { get; set; }

        /// <summary>
        /// Compile-time expression for condition evaluation
        /// </summary>
        public Expression<Func<object, bool>> ConditionExpression { get; set; }
    }

    /// <summary>
    /// Represents a recommendation generated by a clinical rule
    /// </summary>
    public class RuleRecommendation
    {
        /// <summary>
        /// Type of recommendation
        /// </summary>
        public RecommendationType Type { get; set; }

        /// <summary>
        /// Detailed recommendation text
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Urgency of the recommendation
        /// </summary>
        public RecommendationUrgency Urgency { get; set; }
    }

    /// <summary>
    /// Enumeration of rule categories
    /// </summary>
    public enum RuleCategory
    {
        Diagnosis,
        Treatment,
        Prevention,
        Screening,
        Medication,
        Referral
    }

    /// <summary>
    /// Enumeration of rule severity levels
    /// </summary>
    public enum RuleSeverity
    {
        Low,
        Medium,
        High,
        Critical
    }

    /// <summary>
    /// Comparison operators for rule conditions
    /// </summary>
    public enum ComparisonOperator
    {
        Equals,
        NotEquals,
        GreaterThan,
        LessThan,
        GreaterThanOrEqual,
        LessThanOrEqual,
        Contains,
        NotContains
    }

    /// <summary>
    /// Types of recommendations
    /// </summary>
    public enum RecommendationType
    {
        Diagnostic,
        Therapeutic,
        Preventive,
        Referral,
        Monitoring,
        LifestyleModification
    }

    /// <summary>
    /// Urgency of recommendations
    /// </summary>
    public enum RecommendationUrgency
    {
        Immediate,
        Urgent,
        Routine,
        Informational
    }
}
